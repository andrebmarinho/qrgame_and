package br.unb.cic.qrgame.domain;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.ImageFormat;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.os.Environment;
import android.widget.Toast;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.RGBLuminanceSource;
import com.google.zxing.Result;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.WriterException;
import com.google.zxing.qrcode.QRCodeWriter;

public class QRCode {

	private String qrText;
	private Context context;
	public static final String ERRO = new String("Erro na decodificação do código. Tente novamente.");
	
	/**
	 * @Brief: Construtor de quando não é necessário gerar um QRCode, apenas escanear algum.
	 * @param context
	 */
	public QRCode(Context context){
		
		this.qrText = "";
		this.context = context;
		
	}
	
	/**
	 * @Brief: Construtor de quando é necessário gerar um QRCode.
	 * @param qrText
	 * @param context
	 */
	public QRCode(String qrText, Context context){
		
		this.qrText = qrText;
		this.context = context;
		
	}
	
	/**
	 *  A partir de uma string, gera um QR code correspondente. 
	 *	A string passada para o objeto é codificada em uma matriz
	 *	do tipo QR code. A partir da matriz, é construído uma imagem bitmap do tipo ARG_8888.
	 *	Essa imagem é comprimida em jpeg e salva pelo método saveBmp().
	 *
	 */
	
	public void encodeCode(){
		
		QRCodeWriter encoder = new QRCodeWriter();
		BitMatrix matriz;
		Bitmap bmp;
		
		try {
			
			//Codifica o nome do usuário em uma matriz do tipo QR_CODE
		    matriz = encoder.encode(this.qrText, BarcodeFormat.QR_CODE, 400, 400);
			bmp = createQRCBmp(matriz, matriz.getWidth(), matriz.getHeight());
					    
		    try{		    	
		    	this.saveBmp(bmp);		    	
		    } catch (FileNotFoundException eFile){		    			    
		    	Toast.makeText(context, "Erro! " + eFile.getMessage(), Toast.LENGTH_SHORT).show();		  
		    } catch (IOException eIO){		    
		    	Toast.makeText(context, "Erro! " + eIO.getMessage(), Toast.LENGTH_SHORT).show();		   
		    }
		    		    
		} catch (WriterException eEncoder) {						
			Toast.makeText(context, "Erro! " + eEncoder.getMessage(), Toast.LENGTH_SHORT).show();
		} catch (Exception otherError){			
			Toast.makeText(context, "Erro! " + otherError.getMessage(), Toast.LENGTH_SHORT).show();
		}
				
	}
		
	/**
	 * A partir da matriz recebida, um bitmap de altura "altura" e largura "largura" é gerado.
	 * @param matriz
	 * @param largura
	 * @param altura
	 * @return
	 */
	protected Bitmap createQRCBmp(BitMatrix matriz, int largura, int altura){
		
		Bitmap bmp = Bitmap.createBitmap(largura, altura, Bitmap.Config.ARGB_8888);
		
		//Gera um bitmap (ARG_8888 - 4 bytes por pixel) a partir da matriz (i,j) da string codificada
	    for (int j = 0; j < largura; j++)
	        for (int i = 0; i < altura; i++)
	            bmp.setPixel(j, i, matriz.get(j,i) ? Color.BLACK : Color.WHITE);
	    
	    return bmp;
		
	}
	
	/** 
	 * Salva a imagem do qrcode na memória externa do dispositivo.
	 * 		A partir de um bitmap passado ao método, esse comprime a imagem para uma do tipo Jpeg
	 * 	ao passo que a salva na memória externa do dispositivo utilizado.   
	 * 
	 * @throws FileNotFoundException, IOException
	 * 		
	 */
	
	public void saveBmp(Bitmap bmp) throws FileNotFoundException, IOException {
		
		File sd = Environment.getExternalStorageDirectory();
		FileOutputStream saida = null;
		
		try {
			
			saida = new FileOutputStream(new File(sd, "QRcode.jpg"));
		    
		    if ( bmp.compress(Bitmap.CompressFormat.JPEG, 100, saida )){
		    	Toast.makeText(context, "Arquivo QRcode.jpg salvo na memória externa com sucesso!", Toast.LENGTH_SHORT).show();
		    	saida.close();
		    } else {
		    	Toast.makeText(context, "Não foi possível salvar o arquivo. Contate os desenvolvedores.", Toast.LENGTH_SHORT).show();
		    }
		    
		} catch (FileNotFoundException e) {			
			throw new FileNotFoundException("Erro ao salvar o arquivo! " + e.getMessage());		    		    
		} 
				
	}

	/**
	 * Converte uma imagem de um arquivo em um bitmap
	 * A partir do endereço da imagem, o método decodifica uma imagem, se válida, em um bitmap.
	 * @param filePath
	 * @return bmp
	 */	
	public Bitmap imageToBmp(String filePath){
		
		Bitmap bmp = null;		
		File arquivo = new File(filePath);
		if(!arquivo.exists()) 
			Toast.makeText(context, "Arquivo não encontrado.", Toast.LENGTH_SHORT).show();
			
		bmp = BitmapFactory.decodeFile(filePath);	
		return bmp;
		
	}
		
	/**
	 * Decodifica um bitmap de um QR code em uma string.
	 * A partir do bitmap de um possível QR code, o método obtém uma matriz binária dele e decodifica o QR code em uma string.
	 * @param bmp
	 * @return
	 * @throws Exception 
	 */
	public String decodeCode(Bitmap bmp) throws Exception{
		
        Result qrCodeMsg = null;        
        BinaryBitmap bBmp = binaryBmpFromBmp(bmp); 
        				
		try {
			qrCodeMsg = new MultiFormatReader().decode(bBmp);
		} catch (Exception eFile) {
			throw new Exception("Erro ao decodificar! " + eFile.getMessage());
		}
		
		if( qrCodeMsg != null)
			return qrCodeMsg.getText();
		else
			return(ERRO);
		
	}
	
	/**
	 * 
	 * Gerar um bitmap binário, para a decodificação do QR code.
	 * @param bmp
	 * @return bBmp
	 */
	protected BinaryBitmap binaryBmpFromBmp(Bitmap bmp){
		
		int altura = bmp.getHeight();
		int largura = bmp.getWidth(); 
        int[] matriz = new int[altura * largura];
		bmp.getPixels(matriz, 0, largura, 0, 0, largura, altura);
        bmp.recycle();
        RGBLuminanceSource ilumRGB = new RGBLuminanceSource(largura, altura, matriz);
        BinaryBitmap bBmp = new BinaryBitmap(new HybridBinarizer(ilumRGB));    
        
        return bBmp;
		
	}
	
	/**
	 * @Brief: Converte a image do preview para um bitmap que pode ser processado.
	 *  @author techoolblogs
	 *  Método e algoritmo obtido e modificado de "techoolblogs".
	 *  @Reference: http://tech.thecoolblogs.com/2013/02/get-bitmap-image-from-yuv-in-android.html#ixzz3Gd5TdULI
	 */
	public Bitmap bmpFromYUV(byte[] frame, int largura, int altura) {
		
		Bitmap bmp = null;
        ByteArrayOutputStream byteAOutS = new ByteArrayOutputStream();
        YuvImage yuvimage = new YuvImage(frame, ImageFormat.NV21, largura, altura, null);
        yuvimage.compressToJpeg( new Rect(0, 0, largura, altura), 80, byteAOutS );
        BitmapFactory.Options bmpFOptions = new BitmapFactory.Options();
        bmpFOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;
        bmp = BitmapFactory.decodeByteArray(byteAOutS.toByteArray(), 0, byteAOutS.toByteArray().length, bmpFOptions);
        return bmp;
        
	}
	
}
