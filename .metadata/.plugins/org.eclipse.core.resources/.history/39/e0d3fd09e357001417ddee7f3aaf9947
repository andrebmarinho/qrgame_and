package br.unb.cic.qrgame.ui;

import java.io.IOException;
import java.util.List;

import br.unb.cic.qrgame.R;
import br.unb.cic.qrgame.domain.QRCode;
import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Canvas;
//import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.Size;
import android.os.Bundle;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.widget.Toast;

public class ShootActivity extends Activity implements SurfaceHolder.Callback, Camera.PreviewCallback{
			
	QRCode code;
	Camera camera;
	SurfaceView surfV;
	SurfaceView surfVTransp;
	Canvas canvas;
	Bitmap bmp = null;
	boolean Teste = false; //Indica se o programa de testes está rodando essa activity (finaliza em 10s).
	
	@Override
	protected void onCreate(Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_shoot);
		code = new QRCode(getBaseContext());
		camera = Camera.open();
		this.scanQRCode();
		
	}
	
	//TODO: implementar o botão de tiro.
		
	/**
	 * @Brief: por meio do scaneamento, obtém um bitmap (de possível QR code) que é posteriormente decodificado em uma string.
	 * 
	 */
	protected void scanQRCode(){
		
		surfV = (SurfaceView)findViewById(R.id.scannerView);
		surfV.getHolder().addCallback(this);
		
	}
	
	/**
	 * @Brief: processa o frame atual para tentar decodificá-lo como um QR code.
	 * 
	 */
	@Override
	public void onPreviewFrame(byte[] frame, Camera camera) {
		
		int largura = camera.getParameters().getPreviewSize().width;
		int altura = camera.getParameters().getPreviewSize().height;
		this.bmp = code.bmpFromYUV(frame, largura, altura);
		tryDecode(bmp);	
		
	}

	/**
	 * @Brief: Tenta decodificar o frame.
	 * @param bmp
	 */
	private void tryDecode(Bitmap bmp) {
		if( bmp != null ){
			
			String str = QRCode.ERRO;
			try {
				str = code.decodeCode(bmp);
			} catch (Exception e) {
				//TODO: Escrever exceção em log.
			}  
			
			if(!str.equals(QRCode.ERRO))
        		Toast.makeText(ShootActivity.this, "Alvo atingido: " + str , Toast.LENGTH_SHORT).show();
	        				
		}
	}

	/**
	 * @Brief:
	 * 
	 */
	@Override
	public void surfaceChanged(SurfaceHolder holder, int formato, int largura, int altura) {
		
		if(Teste){
			
			finish();
			
		}
		Camera.Parameters parametros = camera.getParameters();
        List<Size> dimensoes = parametros.getSupportedPreviewSizes();
        largura = dimensoes.get(0).width;
        altura = dimensoes.get(0).height;
        parametros.setPreviewSize(largura, altura);
        try{
        	camera.setParameters(parametros);
        	camera.setPreviewDisplay(holder);
        	camera.setPreviewCallback((PreviewCallback) ShootActivity.this);
        	camera.startPreview();
        } catch (Exception eCam){
        	//TODO:        	
        }
	}
	
	/**
	 * 
	 */
	/*//TODO: Criar retângulo onde deve ser posicionado e focalizado o qrcode.
	private void drawScanRect() {
		
		Paint paint = new Paint();
	    paint.setColor(Color.GREEN);
	    paint.setStyle(Paint.Style.FILL_AND_STROKE);
	    paint.setStrokeWidth(10);
	    
	    
	    //Quadrado de 100x100 pixels formado a partir do centro da view de desenho.
	    float x0 = surfVTransp.getX();
	    float y0 = surfVTransp.getY();
	    float largura = surfVTransp.getWidth();
	    float altura = surfVTransp.getHeight();
	    float centroX = x0 + largura / 2;
	    float centroY = y0 + altura / 2;
	    float esquerda = centroX - 100;
	    float cima = centroY - 100;
	    float direita = centroX + 100;
	    float baixo = centroY + 100; 
	    
	    try{
	    	
	    	canvas.drawRect(esquerda, cima, direita, baixo, paint);
	    	surfVTransp.getHolder().unlockCanvasAndPost(canvas);
	    	
	    } catch (Exception e){
		    
	    	Toast.makeText(ShootActivity.this, "Erro! " + e.getMessage(), Toast.LENGTH_SHORT).show();
	   
	    }
	}*/
	
	/**
	 * @Brief: Criação da surface view.
	 * 
	 */
	@Override
	public void surfaceCreated(SurfaceHolder holder) {
				
		try {
			camera.setPreviewDisplay(surfV.getHolder());
		} catch (IOException e) {
			Toast.makeText(this, "Erro na visualização da câmera! " + e.getMessage(), Toast.LENGTH_SHORT).show();
		}		
		
	}
	
	/**
	 * 
	 */
	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
	}
	
}
	


